---
layout: post
title: Vim의 다중 화면 조작
date: 2018-03-10
description: Vim에서 다중 화면을 생성하고 이동하는 방법 및 크기를 조절하는 방법
tags: [Vim, ]
---

코딩을 하다보면 다른 파일에 있는 코드를 봐야 하는 경우가 있다. 함수나 클래스의 정의를 봐야 하는 경우라던지, 자신의 과거 코드나 다른 사람의 코드를 봐야 하는 경우가 있을 수 있다. 물론 iTerm이나 tmux를 사용한다면 화면 분할 후 직접 코드를 열어볼 수 있다. 그러나 Vim에서는 코드를 바로 띄울 수 있기 때문에 Vim을 이용하여 다중 화면을 생성하는 것이 더 편하다. Vim에서 다중 화면을 조작하는 방법을 모른다면 한 번 읽어보시라.

## 다중 화면 생성

*command mode* 에서 ```:split <filename>```을 하거나 ```:sp <filename>```을 한다. 그러면 아래와 같이 새 파일이 아래에 열린다.

![:split을 이용한 화면 분할]({{ "/assets/img/vim_split.png" | absolute_url }})

하지만 나는 코드가 위아래로 보이는 것보다 옆으로 보이는게 더 편해서 ```:vsplit <filename>``` 혹은 ```:vs <filename>``` 을 사용한다. 그러면 아래와 같이 화면이 분할된 것을 볼 수 있다.

![:vsplit을 이용한 화면 분할]({{ "/assets/img/vim_vsplit.png" | absolute_url }})

분할된 화면에서 다시 ```:sp <filename>``` 혹은 ```:vs <filename>```을 하면 3개 혹은 그 이상으로도 화면을 분할할 수 있다. 혹시 파일을 열고 싶은데 파일 이름이 생각나지 않는다면 ```:vs .``` 과 같이 ```:sp <dirname>``` 나 ```:vs <dirname>``` 의 형식으로 뒤에 디렉터리 이름을 줘서 화면을 분할할 수도 있다.

## 다중 화면 이동

화면을 분할한 이후 다른 화면으로 커서를 어떻게 이동시킬 수 있을까? 여기에는 몇 가지 방법이 있다.

* ```ctrl + w + w``` : 다른 화면으로 순차적으로 이동
* ```ctrl + w + h``` : 왼쪽 화면으로 이동
* ```ctrl + w + j``` : 아래쪽 화면으로 이동
* ```ctrl + w + k``` : 위쪽 화면으로 이동
* ```ctrl + w + l``` : 오른쪽 화면으로 이동
